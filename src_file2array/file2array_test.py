#convert file to static C array
#
#This is useful to statically embed smaller data (icons) into the program
#
#the output C file will be much larger then all the input files together (4 times)
#it will make the programm larger, so better use it only for little data
#keep the array at global scope (not in any function) or it uses up stack memory at runtime
#some compilers may not like too big arrays
#
#
#usage:
# file2array.py <output.c> <input0> <input1> ...
#
#file names are alphabetically sorted first
#if duplicate file pathes are found it warns and drops them
# abort upon conflict with generated macro names
#then files are checked for existance, quits of one is missing
#all files are put into a single array, sorted by their name
# - use index number or preprocessor macros to access file data directly
#
#
#



'''
typedef struct filearray {
	const char *name //ASCII, file path/name (using escape codes %XX)
	unsigned int size //file size in bytes
	unsigned char data
} filearray;
 
'''
//autogenerated C file array by ...py
//Changes will be overwritten next time!
//include to your project once
//access file via preprocessor macros
// - start with "FILEARRAY_", then path and filename, all letters big, non alphanumerical characters are replaced with "_"
// - macro names stay the same, also if regenerated with other files added or removed
// all

#define FILEARRAY_  files.
#define 

struct {
	unsigned int size; //elements in filearray, not bytes
	filearray filearray[];

} files = {
	...size,
	{
		{ //file 0
			..name,
			..size,
			{
			0x11,0x11,0x99,
			}
		},
		{ //file 1
			..name,
			..size,
			{
			0x11,0x11,0x99,
			}
		}
  }
};
