iffanimplay
###########


Version: 01-Feb-2015
Author: Markus Wolf (http://murkymind.de/projects/iffanim/)
License: GNU LGPL v3 (http://www.gnu.org/licenses/lgpl.html)


License:
--------
All files of this package are released under the above license unless specified otherwise.


Source package info:
--------------------
This package includes player code and file format readers designed as independent libraries:
 iffanimplay
 libiffanim
 libcdxl
The libraries have no depencies and can be integrated easily into any other project without the player.


Purpose/Features:
-----------------
 - Video player for IFF ANIM cel animation files and CDXL video
   - IFF ANIM was supported by many graphics software on the Commodore Amiga platform
   - CDXL (not IFF related; uncompressed, typically streamed from CD, thus used in several CD32 games)
 - the actual decoding and format support is done via included libraries (part of this player project): libiffanim, libcdxl
 - Portability: uses SDL 1.2.x library (libsdl, http://www.libsdl.org) for video/audio output and keyboard input
 - Controls via keyboard (optional GUI planned)
 - Ability to export frames to single BMP files and raw audio data, along with timing information

 Supported via libiffanim:
   frame compressions:
     0 (ILBM BODY),
     5 (ANIM5),
     7 (ANIM7/ANIM7L/ANIM7S),
     8 (ANIM8/ANIM8L/ANIM8S),
     74('J'),
     100 (Scala ANIM32/ANIM32I) and 101 (Scala ANIM16/ANIM16I) -> exported by Scala AnimLab (part of "Multimedia" and "InfoChannel"),
     + HAM6, HAM8, EHB graphic modes
   audio:
     "WaveTracer DS"/"AnimFX" format using "SBDY" chunks, called SoundANIM/sndanim -> audio for each frame (interleaved as in AVI)
     ANIM+SLA (ANIM with statically loaded audio) -> a sound bank
   
 Supported via libcdxl:
   CDXL video (only RGB)

 Not supported (yet?) due to missing test files:
   - IFF ANIM compression 1 (XOR), 2 (Long Delta), 3 (Short Delta), 4 (General Delta), 6 (ANIM5 Stereoscopic - by Cryogenic Software), 
                 108 (ANIMl) -> see XAnim source code; ,


todo: file stream support, without loading all frames to memory first
todo: support for ANIM+SLA introduced with BigAnim 4.0 and SET2ANIM (see Aminet) and described in their docs
todo: support for ANSQ (animation sequence) chunk, some files have stored frames out of order (ANIM-J only?) which won't (decode ?) and play correctly otherwise
      -> maybe print if chunk is found, but ignore it by default (use only if parameter option) -> can create loops blowing up the number of frames multiple times
      -> seems to give the order of DLTA decoding, otherwise garbled graphics (wrongly applied delta) appear
      (thanks to the info given here: https://home.comcast.net/~erniew/cghist/cvtmovie.html)
todo: read a "form ilbm" completely to memory when searching for subchunks to avoid jumping around in file
      although a modern OS should cache it anyways in RAM
todo: add debug method printing chunk sequence
todo: CRNG - color cycling -> map to one frame per color (1/60 sec resolution) -> for delay longer than 1 we split single into multiple frames


todo:
-nogui        no GUI available (GUI graphics not loaded)
-hidegui      show no gui at start
-scalesmooth  bilinear scaling (else nearest neighbour used by default)

dragAndDrop:  system_specific.cpp (Windows already supported)

gui:
progressbar
time scale slider
0:00:00/0:00:00
buttons: play, pause, next frame




Usage:
------
  iffanimplay inputfile [options]
  example: iffanimplay "somedir/anims/fun.anim" -loop -loopanim -fixtime2 -w256
  
  To specify options without any input file use "", this opens the player window - some options are reset when opening a new file later.
  example: iffanimplay "" -loop -loopanim -fixtime2 -w256
  
  Just open the player window, no options:
  example: iffanimplay

Options:
--------
Generic:

  -h or --help       - print help
  -extract <dir>     - all frames are extracted to the specified directory path as *.bmp files, audio as raw, timing info is written to an extra file, other options are ignored; no frame is shown (an empty directory is recommended)
  -loop              - play in a loop (continue with first frame after last one)
  -help              - print command line help
  -pause             - show first frame and pause at start (else playback starts by default)
  -noaudio           - no audio is played
  -w                 - scale to requested width in pixels
  -h                 - scale to requested height in pixels

IFFanim related:
  -fixtime...      - a fixed delay between frames is used, delay in ms (example:  "-fixtime1000")
  -loopanim        - doesn't play the last 2 frames when looping, for animations where the 2 first and the 2 last frames are the same

Non IFFanim:
  -fps...          - set frames per second value (example: -fps15.5); audio sample rate and pitch is adjusted accordingly
  
todo:
  -dw...             - scale to requested width in pixels (example: "-w300"), nearest neighbour scaling only
  -dh...             - scale to requested height in pixels
  -d...x...          - scale to requested dimensions, width and height (example: "-d800x600")
  -fs...x...         - start in fullscreen mode, a supported FS resolution must be given (in combination with -w -h centers image and controls aspec ration)(example: "-fs800x600")
                       - in combination with -dw/-dh/-d... the aspect ratio is preserved in fullscreen
                       - without -dw/-dh/-d... the frames are scaled to fullscreen dimensions


Keys:
-----
  [space]:  play / pause
  [r] or [backspace]: reset to first frame and pause (keeps current scaling)
  [right]:  go to next frame (hold to retrigger)
  [left]:   go to previous frame (not supported for all formats)(hold to retrigger)
  [esc]:    quit
  [0]:      sets scaling factor to 1/2 -> half width and height
  [1]:      sets scaling factor to 1   -> original, no scaling
  [2]:      sets scaling factor to 2   -> width and height is doubled
  [3]:      sets scaling factor to 3   -> width and height is tripled
  [g]:      toggle graphical user interface (not useable yet)
  [c]:      close current file
  [l]:      toggle loop

TODO: [k]:  toggle loopanims 
TODO: [alt]+[enter] -> switch between fullscreen and windowed mode (keep aspect ratio in fullscreen)
TODO: [F1]: save snapshot to snapshot directory (option "-snapdir" required, otherwise pauses animation and opens file requester if supported on system)


Window title bar:
------------------
 Shows following information:
   [current dimensions / original dimensions] [current frame / total frames (original play length in seconds)] [player state] "lag in ms"

 - "lag" increases if the frames cannot be decoded or displayed in time (CPU too weak) => scaling to lower dimensions might help to decrease "lag"


Notes:
------
 - HAM: Hold And Modify (http://en.wikipedia.org/wiki/Hold-And-Modify)
 - EHB: Extra Half-Brite/Half-Bright (http://en.wikipedia.org/wiki/Halfbrite_mode)
 
 - Console stays open and shows file info and log
 - exported images are unscaled
 - video and audio may desynchronize, if video decoding and scaling takes to much CPU usage
   -> pause and unpause to synchronize audio and video

 - All frames are shown during playback, none is skipped
 - for correct timing without frame skipping a delta frame must be decoded in less than 1/60 second for animations using the maximum frame rate (60fps)
 - there are special loop anims having 2 frames at the end that are the same as the the first 2 frames, other loop anims don't
   have these frames.
   - There is no automatic recognition
   - To detect this a program would have to decode the whole ANIM, before byte wise comparisons of these frames can be done
 - The animation starts playing automatically and stops at the end by default (when no looping is specified)
 - There are other open source players: 
     * XAnim : "http://xanim.polter.net" (only for X11 graphics system -> Linux/Unix)
     * multishow : "http://www.randelshofer.ch/multishow/download.html" (Java)
     * AnimFX: "http://www.virtualworlds.de/AnimFX" (Amiga only) (http://aminet.net/package/gfx/show/AnimFX)
    
     * cdxlplay: http://www.a500.org/main-menu/projects/cdxlplay.xhtml 
     * VLC media player: "www.videolan.org"  (can play CDXL; only HAM6/HAM8 is displayed yet, else all frames are black; shows no fps, but uses internal default value)
       - to correct pitch for wrong FPS disable Prefs->All->Audio->"Enable time stretching", now time scaling can adjust wrong playback speed satisfyingly

 - Hollywood 5.3 also supports Scala Anims
   http://forums.hollywood-mal.com/viewtopic.php?f=19&t=767


Conversion hints
----------------
Use the extraction option to extract data in useable form.

If the data should be converted to a FPS based video format (each frame with same delay):
  The FPS should be chosen to be "1 / (smallest frame delay)" (1/60 minimum for iffanim), otherwise frames get lost very likely.
  A parser is needed that synchronizes the output frame to the input (extracted) frame.
 


History:
--------
2015-11
 - player code heavily reorganized
   - audio broken :-(
 - drag & drop on Windows
 - libiffanim: support for SCALA ANIM compression 

2008-04-22
 - player code adjusted for multiple decoders
 - options modified
 - libcdxl included for CDXL file support






todo
---------------------------------

add snapshot key 
 
on error output: 
 - cannot set full screen resolution ...x...
 supported resolutions:
   ...<sdl get list of resolutions>
   ...
 (or use windowed mode)
-----

pressing right
-> Error: frame step backward not supported (only in indexed mode)

------
-ansq             - if ANSQ chunk/list is found in ANIM file, play frames in the list's order, not stored DLTA frame order, which is default
-snapdir "path"   - snapshot directory (snapshots are only possible, if a valid path was given)
-speed...         - playback speed factor, audio is resampled accordingly (floating point, e.g.: "-speed1.53")
-audiosync        - force audio to be synchronous to frames => produces audio gaps if frames aren't displayed fast enough (asynchronous mode is used by default if possible)
-gl               - use OpenGL window => hardware accelerated scaling

-mt..  ,multithreading 1..4 (default => 1), improves loading or multithreaded scaling

-fs...x...  //start in fullscreen mode
(or use normal window mode and press alt + enter -> tries to use minimum available resolution so that no pixels are skipped)
 -> and screen is not too big, which could slow down




